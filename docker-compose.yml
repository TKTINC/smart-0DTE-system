version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smart0dte_postgres
    environment:
      POSTGRES_DB: smart0dte
      POSTGRES_USER: smart0dte_user
      POSTGRES_PASSWORD: smart0dte_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - smart0dte_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smart0dte_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - smart0dte_network

  # InfluxDB Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: smart0dte_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: smart0dte_influx_password
      DOCKER_INFLUXDB_INIT_ORG: smart0dte
      DOCKER_INFLUXDB_INIT_BUCKET: market_data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: smart0dte_influx_token_12345
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - smart0dte_network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart0dte_backend
    environment:
      - DATABASE_URL=postgresql://smart0dte_user:smart0dte_password@postgres:5432/smart0dte
      - REDIS_URL=redis://redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=smart0dte_influx_token_12345
      - INFLUXDB_ORG=smart0dte
      - INFLUXDB_BUCKET=market_data
      - DATABENTO_API_KEY=${DATABENTO_API_KEY}
      - IBKR_HOST=${IBKR_HOST:-127.0.0.1}
      - IBKR_PORT=${IBKR_PORT:-7497}
      - IBKR_CLIENT_ID=${IBKR_CLIENT_ID:-1}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - influxdb
    networks:
      - smart0dte_network
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smart0dte_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - smart0dte_network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: smart0dte_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - smart0dte_network
    restart: unless-stopped

  # Grafana for Monitoring (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: smart0dte_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - smart0dte_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  grafana_data:

networks:
  smart0dte_network:
    driver: bridge

