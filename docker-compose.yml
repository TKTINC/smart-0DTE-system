version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: smart-0dte-postgres
    environment:
      POSTGRES_DB: smart_0dte
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/app/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - smart-0dte-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: smart-0dte-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart-0dte-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  influxdb:
    image: influxdb:2.7
    container_name: smart-0dte-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: smart-0dte
      DOCKER_INFLUXDB_INIT_BUCKET: market_data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: smart-0dte-token-123456789
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - smart-0dte-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart-0dte-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/smart_0dte
      REDIS_URL: redis://redis:6379
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: smart-0dte-token-123456789
      INFLUXDB_ORG: smart-0dte
      INFLUXDB_BUCKET: market_data
      POLYGON_API_KEY: ${POLYGON_API_KEY:-demo_key}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY:-demo_key}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-demo_key}
      IBKR_HOST: ${IBKR_HOST:-127.0.0.1}
      IBKR_PORT: ${IBKR_PORT:-7497}
      IBKR_CLIENT_ID: ${IBKR_CLIENT_ID:-1}
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - smart-0dte-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Data Feed Service
  data-feed:
    build:
      context: ./backend
      dockerfile: Dockerfile.data-feed
    container_name: smart-0dte-data-feed
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/smart_0dte
      REDIS_URL: redis://redis:6379
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: smart-0dte-token-123456789
      INFLUXDB_ORG: smart-0dte
      INFLUXDB_BUCKET: market_data
      POLYGON_API_KEY: ${POLYGON_API_KEY:-demo_key}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY:-demo_key}
    volumes:
      - ./backend:/app
      - data_feed_logs:/app/logs
    networks:
      - smart-0dte-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Signal Generator Service
  signal-generator:
    build:
      context: ./backend
      dockerfile: Dockerfile.signal-generator
    container_name: smart-0dte-signal-generator
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/smart_0dte
      REDIS_URL: redis://redis:6379
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: smart-0dte-token-123456789
      INFLUXDB_ORG: smart-0dte
      INFLUXDB_BUCKET: market_data
      OPENAI_API_KEY: ${OPENAI_API_KEY:-demo_key}
    volumes:
      - ./backend:/app
      - signal_generator_logs:/app/logs
    networks:
      - smart-0dte-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./smart-0dte-frontend
      dockerfile: Dockerfile
    container_name: smart-0dte-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./smart-0dte-frontend:/app
      - /app/node_modules
    networks:
      - smart-0dte-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  backend_logs:
  data_feed_logs:
  signal_generator_logs:

networks:
  smart-0dte-network:
    driver: bridge

